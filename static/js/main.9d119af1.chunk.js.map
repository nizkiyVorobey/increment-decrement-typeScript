{"version":3,"sources":["store/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","currentValue","store","createStore","state","action","type","value","connect","dispatch","increment","decrement","setValue","props","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAGMA,EAA6B,CAC/BC,aAAc,GAmDHC,EAFDC,aAzBE,WAA+C,IAA9CC,EAA6C,uDAArCJ,EAAcK,EAAuB,uCAC1D,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,eACAF,EADP,CAEIH,aAAcG,EAAMH,aAAe,IAG3C,IAAK,YACD,OAAO,eACAG,EADP,CAEIH,aAAcG,EAAMH,aAAe,IAG3C,IAAK,YACD,OAAO,eACAG,EADP,CAEIH,aAAcI,EAAOE,QAG7B,QACI,OAAOH,KAIgBJ,GCqBnC,IASeQ,eAhBf,SAAyBJ,GACvB,MAAO,CACLH,aAAcG,EAAMH,iBAKG,SAACQ,GAC1B,MAAO,CACLC,UAAW,kBAAMD,ED9DsC,CACvDH,KANc,eCoEdK,UAAW,kBAAMF,ED3DsC,CACvDH,KATc,eCoEdM,SAAU,SAACL,GAAD,OAAmBE,EDxDT,SAACF,GAAD,MAAuC,CAC3DD,KAZc,YAadC,SCsDsCK,CAASL,KAC/CE,cAIWD,EAhDH,SAACK,GAkBX,OACI,yBAAKC,UAAU,OACb,0DACA,+CAAqBD,EAAMZ,cAE3B,6BACE,4BAAQK,KAAK,SAASS,QAtBN,WAEtBF,EAAMH,cAoBA,aACA,4BAAQJ,KAAK,SAASS,QAXP,WACrBF,EAAMD,SAAS,MAUT,YACA,4BAAQN,KAAK,SAASS,QAnBN,WAItBF,EAAMF,cAeA,kBCjDUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAD,CAAUpB,MAAOA,GACb,kBAAC,EAAD,OAEJqB,SAASC,eAAe,SD8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d119af1.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\nimport {ActionType, AppActions, DecrementInterface, IncrementInterface, SetValueInterface} from \"../actions/actions\";\r\n\r\nconst initialState: InitialState = {\r\n    currentValue: 0,\r\n};\r\n\r\n\r\n//Action\r\nconst INCREMENT = 'INCREMENT';\r\nconst DECREMENT = 'DECREMENT';\r\nconst SET_VALUE = 'SET_VALUE';\r\n\r\n// Action Creator\r\nexport const IncrementCreator = (): IncrementInterface => ({\r\n    type: INCREMENT,\r\n});\r\n\r\nexport const DecrementCreator = (): DecrementInterface => ({\r\n    type: DECREMENT,\r\n});\r\n\r\nexport const setValue = (value: number): SetValueInterface => ({\r\n    type: SET_VALUE,\r\n    value,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue - 1,\r\n            };\r\n\r\n        case 'DECREMENT':\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1,\r\n            };\r\n\r\n        case 'SET_VALUE':\r\n            return {\r\n                ...state,\r\n                currentValue: action.value,\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;\r\n","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport {DecrementCreator, IncrementCreator, setValue} from \"./store/store\";\nimport {Dispatch} from \"redux\";\nimport {AppActions} from \"./actions/actions\";\n\nconst App = (props: any) => {\n\n  const handleIncrement = () => {\n\n    props.increment()\n  };\n\n  const handleDecrement = () => {\n    // props.dispatch({\n    //     type: 'DECREMENT'\n    // })\n    props.decrement()\n  };\n\n  const handleSetValue = () => {\n    props.setValue(30)\n  };\n\n  return (\n      <div className=\"App\">\n        <h1>Increment & Decrement APP!</h1>\n        <p>Current Value is {props.currentValue}</p>\n\n        <div>\n          <button type=\"button\" onClick={handleIncrement}>INCREMENT</button>\n          <button type=\"button\" onClick={handleSetValue}>SetValue</button>\n          <button type=\"button\" onClick={handleDecrement}>DECREMENT</button>\n        </div>\n      </div>\n  );\n}\n\nfunction mapStateToProps(state: InitialState) {\n  return {\n    currentValue: state.currentValue\n  };\n}\n\n\nconst mapDispatchToProps = (dispatch: Dispatch<AppActions>) => {\n  return {\n    increment: () => dispatch(IncrementCreator()), // Тут мы вызываем action creator\n    decrement: () => dispatch(DecrementCreator()), // Тут мы диспатчим сам action\n    setValue: (value: number) => dispatch(setValue(value)), // Тут мы диспатчим сам action\n    dispatch\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}